// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolApp.Data;

#nullable disable

namespace SchoolApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241128132304_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1874d51f-29bc-4669-8f9d-938eaa55e4dd"),
                            RoleId = new Guid("bc1bfaec-7297-48f0-a649-f290de46ad74")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExcused")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc1bfaec-7297-48f0-a649-f290de46ad74"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("951a0b30-2bcb-4e61-b0fa-d90512119130"),
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = new Guid("167b9fd4-2252-4d5f-9b5d-867599a3e746"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("SchoolApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a093ebf-f3b9-403e-bcbf-5533f224854c",
                            Email = "Stefan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "STEFAN@GMAIL.COM",
                            NormalizedUserName = "STEFAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGfSSKzMXZf01041tvOFOM+ytNr7GN8drggzzDSvMpG4Hy70+UJJ7QDEsobAVBrP/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46A8A765-124C-4BB6-9885-E9DED7A7949E",
                            TwoFactorEnabled = false,
                            UserName = "Stefan@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("79eb351b-ed32-4309-9234-88db8555cd3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "117956f5-15db-400c-903d-63a9c0157193",
                            Email = "Margarita@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MARGARITA@GMAIL.COM",
                            NormalizedUserName = "MARGARITA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKCEORRGWK/14Ywm9ko3iTMGUzFGsKZvGQOY0Xz+rpf0LRur8cmXtIZG6ALnE9WeKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "270A966E-DFC5-49F7-A4E7-426394B559E0",
                            TwoFactorEnabled = false,
                            UserName = "Margarita@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("e4c5fd5f-c02a-474b-8f51-d4a543f361d3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17f62ab4-da94-41ec-b94e-442df079043b",
                            Email = "Maria@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEW0N8aOEr9gfpZK52QGJA4tCSl/7oMKGrgwQSLrLwcsN6CKqW1j9BCRy1TSej6YBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ED56D26-BAB0-4436-BE12-5D475C6A199E",
                            TwoFactorEnabled = false,
                            UserName = "Maria@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d040cb3e-ae29-4045-943c-4030a4249476"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3759b6ff-3b61-4cd4-af8c-d2c1d827eb7a",
                            Email = "Ani@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ANI@GMAIL.COM",
                            NormalizedUserName = "ANI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMpOMYszk6RfMSD2XcmdoReFCt3xixgK+7ffQj58LpTccVz4E6U5JXCOqMmheoXQkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98F44674-7EC8-48FE-BB0B-1444B0C2A8B2",
                            TwoFactorEnabled = false,
                            UserName = "Ani@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1874d51f-29bc-4669-8f9d-938eaa55e4dd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a02cb12a-702a-4223-b6bc-2aed3c0ecbb6",
                            Email = "Tsveti@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TSVETI@GMAIL.COM",
                            NormalizedUserName = "TSVETI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEr5ssKigIYrp+yQweiI2oyLfZ+TJ3adFWa29WnJKzFshHXCaiJpg+wzrl8arZr7hA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "C5306DA7-98D7-4C13-B981-36CACB3C76D1",
                            TwoFactorEnabled = false,
                            UserName = "Tsveti@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("eaad8ef4-d0c4-4cee-bbf0-e1f8e43a6d99"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e55ea35e-4612-42d0-bbce-fab5e4b07b14",
                            Email = "Emilia@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "EMILIA@GMAIL.COM",
                            NormalizedUserName = "EMILIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGwjAEzX2ERXY/TrH/f+VDO0WERhnud9mMJsBc0zMXLX/c0CWXatiU3HAlY6TaSEEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0EF0F0C3-3B6A-43E7-8C1C-F782FA7F7504",
                            TwoFactorEnabled = false,
                            UserName = "Emilia@gmail.com"
                        });
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeLevel")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GradeLevel = 5,
                            SectionId = 1
                        },
                        new
                        {
                            Id = 2,
                            GradeLevel = 5,
                            SectionId = 2
                        },
                        new
                        {
                            Id = 3,
                            GradeLevel = 5,
                            SectionId = 3
                        },
                        new
                        {
                            Id = 4,
                            GradeLevel = 6,
                            SectionId = 1
                        },
                        new
                        {
                            Id = 5,
                            GradeLevel = 6,
                            SectionId = 2
                        },
                        new
                        {
                            Id = 6,
                            GradeLevel = 6,
                            SectionId = 3
                        });
                });

            modelBuilder.Entity("SchoolApp.Data.Models.GalleryImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("GalleryImages");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Remark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemarkText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Remarks");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "А"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Б"
                        },
                        new
                        {
                            Id = 3,
                            Name = "В"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Г"
                        });
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 1,
                            FirstName = "Иван",
                            LastName = "Иванов",
                            MiddleName = "Неделинов"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 1,
                            FirstName = "Мария",
                            LastName = "Петрова",
                            MiddleName = "Викторова"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 1,
                            FirstName = "Георги",
                            LastName = "Димитров",
                            MiddleName = "Петрунов"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 2,
                            FirstName = "Елена",
                            LastName = "Станкова",
                            MiddleName = "Георгиева"
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 2,
                            FirstName = "Петра",
                            LastName = "Стайкова",
                            MiddleName = "Петрунова"
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 2,
                            FirstName = "Георги",
                            LastName = "Петров",
                            MiddleName = "Иванов"
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 3,
                            FirstName = "Мария",
                            LastName = "Петрова",
                            MiddleName = "Георгиева"
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 3,
                            FirstName = "Иван",
                            LastName = "Иванов",
                            MiddleName = "Стефанов"
                        },
                        new
                        {
                            Id = 9,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 3,
                            FirstName = "Елена",
                            LastName = "Василева",
                            MiddleName = "Николова"
                        },
                        new
                        {
                            Id = 10,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 4,
                            FirstName = "Никола",
                            LastName = "Димитров",
                            MiddleName = "Петров"
                        },
                        new
                        {
                            Id = 11,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 4,
                            FirstName = "Петър",
                            LastName = "Димитров",
                            MiddleName = "Георгиев"
                        },
                        new
                        {
                            Id = 12,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 4,
                            FirstName = "Даниела",
                            LastName = "Маринова",
                            MiddleName = "Иванова"
                        },
                        new
                        {
                            Id = 13,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 5,
                            FirstName = "Александър",
                            LastName = "Стоянов",
                            MiddleName = "Николов"
                        },
                        new
                        {
                            Id = 14,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 5,
                            FirstName = "Калина",
                            LastName = "Димитрова",
                            MiddleName = "Петкова"
                        },
                        new
                        {
                            Id = 15,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 5,
                            FirstName = "Радослав",
                            LastName = "Петров",
                            MiddleName = "Георгиев"
                        },
                        new
                        {
                            Id = 16,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 6,
                            FirstName = "Борис",
                            LastName = "Караджов",
                            MiddleName = "Стефанов"
                        },
                        new
                        {
                            Id = 17,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 6,
                            FirstName = "Антония",
                            LastName = "Тодорова",
                            MiddleName = "Илиева"
                        },
                        new
                        {
                            Id = 18,
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            ClassId = 6,
                            FirstName = "Виктор",
                            LastName = "Колев",
                            MiddleName = "Алексиев"
                        });
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Български език и литература"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Физика"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Химия"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Програмиране"
                        },
                        new
                        {
                            Id = 6,
                            Name = "История"
                        });
                });

            modelBuilder.Entity("SchoolApp.Data.Models.SubjectStudent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectsStudents");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 1,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 1,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 1,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 1,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 1,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 2,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 2,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 2,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 2,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 2,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 3,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 3,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 3,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 3,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 3,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 3,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 4,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 4,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 4,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 4,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 4,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 4,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 5,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 5,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 5,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 5,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 5,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 5,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 6,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 6,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 6,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 6,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 6,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 6,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 7,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 7,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 7,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 7,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 7,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 7,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 8,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 8,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 8,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 8,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 8,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 8,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 9,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 9,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 9,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 9,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 9,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 9,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 10,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 10,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 10,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 10,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 10,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 10,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 11,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 11,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 11,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 11,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 11,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 11,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 12,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 12,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 12,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 12,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 12,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 12,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 13,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 13,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 13,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 13,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 13,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 13,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 14,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 14,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 14,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 14,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 14,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 14,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 15,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 15,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 15,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 15,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 15,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 15,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 16,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 16,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 16,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 16,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 16,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 16,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 17,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 17,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 17,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 17,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 17,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 17,
                            SubjectId = 6
                        },
                        new
                        {
                            StudentId = 18,
                            SubjectId = 1
                        },
                        new
                        {
                            StudentId = 18,
                            SubjectId = 2
                        },
                        new
                        {
                            StudentId = 18,
                            SubjectId = 3
                        },
                        new
                        {
                            StudentId = 18,
                            SubjectId = 4
                        },
                        new
                        {
                            StudentId = 18,
                            SubjectId = 5
                        },
                        new
                        {
                            StudentId = 18,
                            SubjectId = 6
                        });
                });

            modelBuilder.Entity("SchoolApp.Data.Models.SubjectTeacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectsTeachers");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GuidId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            GuidId = new Guid("8dba352b-6027-4bcb-b5d9-4585381b3930"),
                            ApplicationUserId = new Guid("39d7bb6d-eb8a-40fc-be00-9c5296a2717c"),
                            FirstName = "Стефан",
                            ImageUrl = "/img/No_Image.jpg",
                            JobTitle = "Учител",
                            LastName = "Николов"
                        },
                        new
                        {
                            GuidId = new Guid("24eebace-ba21-4a57-b421-c74b131aca68"),
                            ApplicationUserId = new Guid("79eb351b-ed32-4309-9234-88db8555cd3d"),
                            FirstName = "Маргарита",
                            ImageUrl = "/img/No_Image.jpg",
                            JobTitle = "Учител",
                            LastName = "Йорданова"
                        },
                        new
                        {
                            GuidId = new Guid("790ed914-ac05-441a-a2cd-60cf81051e92"),
                            ApplicationUserId = new Guid("e4c5fd5f-c02a-474b-8f51-d4a543f361d3"),
                            FirstName = "Мария",
                            ImageUrl = "/img/No_Image.jpg",
                            JobTitle = "Учител",
                            LastName = "Чавдарова"
                        },
                        new
                        {
                            GuidId = new Guid("f189e8ec-6c34-4053-a84f-42e8a7ec7f9e"),
                            ApplicationUserId = new Guid("d040cb3e-ae29-4045-943c-4030a4249476"),
                            FirstName = "Ани",
                            ImageUrl = "/img/No_Image.jpg",
                            JobTitle = "Учител",
                            LastName = "Григорова"
                        },
                        new
                        {
                            GuidId = new Guid("9b3d7d44-d831-42c7-abae-ff5af6e72e03"),
                            ApplicationUserId = new Guid("1874d51f-29bc-4669-8f9d-938eaa55e4dd"),
                            FirstName = "Цветелина",
                            ImageUrl = "/img/No_Image.jpg",
                            JobTitle = "Заместник-директор",
                            LastName = "Томова"
                        },
                        new
                        {
                            GuidId = new Guid("5d14d4c1-3245-46cb-a361-08c6ab596dab"),
                            ApplicationUserId = new Guid("eaad8ef4-d0c4-4cee-bbf0-e1f8e43a6d99"),
                            FirstName = "Емилия",
                            ImageUrl = "/img/No_Image.jpg",
                            JobTitle = "Заместник-директор",
                            LastName = "Истаткова"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Absence", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.Student", "Student")
                        .WithMany("Absences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Data.Models.Subject", "Subject")
                        .WithMany("Absences")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.GalleryImage", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.Album", "Album")
                        .WithMany("Images")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Data.Models.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Remark", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.Student", "Student")
                        .WithMany("Remarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Data.Models.Subject", "Subject")
                        .WithMany("Remarks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.SubjectStudent", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.Student", "Student")
                        .WithMany("SubjectStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolApp.Data.Models.Subject", "Subject")
                        .WithMany("SubjectStudents")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.SubjectTeacher", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.Subject", "Subject")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolApp.Data.Models.Teacher", "Teacher")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolApp.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("SchoolApp.Data.Models.Teacher", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Album", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Student", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Grades");

                    b.Navigation("Remarks");

                    b.Navigation("SubjectStudents");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Subject", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Grades");

                    b.Navigation("Remarks");

                    b.Navigation("SubjectStudents");

                    b.Navigation("SubjectTeachers");
                });

            modelBuilder.Entity("SchoolApp.Data.Models.Teacher", b =>
                {
                    b.Navigation("SubjectTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
